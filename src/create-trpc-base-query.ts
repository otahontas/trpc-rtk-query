import { type BaseQueryFn } from "@reduxjs/toolkit/query/react";
import {
  TRPCClientError,
  type TRPCRequestOptions,
  getUntypedClient,
} from "@trpc/client";
import { type AnyRouter, TRPCError } from "@trpc/server";
import { getHTTPStatusCodeFromError } from "@trpc/server/http";

import { type TRPCClientOptions } from "./trpc-client-options";

/**
 * Errors baseQuery can return. Follows the conventions of RTK query's fetchBaseQuery
 **/
export type TRPCBaseQueryError =
  | {
      /**
       * * `"TRPC_CLIENT_ERROR"`:
       *   An error that happened on trpc client. Original error is stringified in error
       *   attribute.
       **/
      data?: undefined;
      error: string;
      message: string;
      name: string;
      status: "TRPC_CLIENT_ERROR";
    }
  | {
      /**
       * * `"TRPC_ERROR"`:
       *   An error that was returned by trpc backend. Original error is stringified in
       *   error attribute.
       **/
      data?: undefined;
      error: string;
      message: string;
      name: string;
      status: "TRPC_ERROR";
      statusCode: number;
    }
  | {
      /**
       * * `"UNKNOWN_ERROR"`:
       *   A unknown error type that captures error not wrapped by trpc. Original error
       *   is stringified in error attribute
       **/
      data?: unknown;
      error: string;
      status: "UNKNOWN_ERROR";
    };

/**
 * Typings for trpc spesific base query, used by new apis generated by this library.
 **/
export type TRPCBaseQuery = BaseQueryFn<
  // Arguments for baseQuery. Should be used when injecting endpoints
  {
    procedureArguments: unknown;
    procedurePath: string;
    procedureType: "mutation" | "query";
  },
  // Result type. TODO: Should this be union of all possible types that trpc backend can
  // return?
  unknown,
  // Typed errors
  TRPCBaseQueryError,
  // Allow request options (e.g context and signal) to be passed in via extra options
  TRPCRequestOptions,
  // No meta is returned
  never
>;

/**
 * Creates a base query that uses trpc client under the hood.
 **/
export const createTRPCBaseQuery =
  <TRouter extends AnyRouter>(
    TRPCClientOptions: TRPCClientOptions<TRouter>,
  ): TRPCBaseQuery =>
  async (baseQueryArguments, baseQueryApi, extraOptions) => {
    const { procedureArguments, procedurePath, procedureType } = baseQueryArguments;

    // Resolve client either directly or via getClient func
    let client;
    if ("client" in TRPCClientOptions) {
      client = getUntypedClient(TRPCClientOptions.client);
    } else if ("getClient" in TRPCClientOptions) {
      client = getUntypedClient(await TRPCClientOptions.getClient(baseQueryApi));
    } else {
      throw new Error("No client or getClient specified in options!");
    }

    try {
      return {
        data: await client[procedureType](
          procedurePath,
          procedureArguments,
          extraOptions,
        ),
      };
    } catch (error) {
      let properlyShapedError: {
        error: TRPCBaseQueryError;
      };
      if (error instanceof TRPCClientError) {
        properlyShapedError = {
          error: {
            error: String(error),
            message: error.message,
            name: error.name,
            status: "TRPC_CLIENT_ERROR",
          },
        };
      } else if (error instanceof TRPCError) {
        properlyShapedError = {
          error: {
            error: String(error),
            message: error.message,
            name: error.name,
            status: "TRPC_ERROR",
            statusCode: getHTTPStatusCodeFromError(error),
          },
        };
      } else {
        properlyShapedError = {
          error: {
            error: String(error),
            status: "UNKNOWN_ERROR",
          },
        };
      }
      return properlyShapedError;
    }
  };
